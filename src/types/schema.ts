/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/key": {
    /** API Key Information */
    get: {
      responses: {
        /** @description Get key information */
        200: {
          content: {
            "application/json": {
              /** @example true */
              success?: boolean;
              record?: {
                /** Format: uuid */
                key?: string;
                /** Format: uuid */
                owner?: string;
                /** @default 120 */
                limit?: number;
                queriesInPastMin?: number;
                totalQueries?: number;
              };
            };
          };
        };
        403: components["responses"]["InvalidKey"];
        429: components["responses"]["RateLimited"];
      };
    };
  };
  "/player": {
    /** Data of a specific player, including game stats */
    get: {
      parameters: {
        query: {
          uuid: string;
        };
      };
      responses: {
        /** @description Get player's data */
        200: {
          content: {
            "application/json": {
              /** @example true */
              success?: boolean;
              player?: {
                /** @example 3fa85f6457174562b3fc2c963f66afa6 */
                uuid?: string;
                displayname?: string | null;
                /** @enum {string|null} */
                rank?: "ADMIN" | "MODERATOR" | "HELPER" | "NORMAL" | null;
                /** @enum {string|null} */
                packageRank?: "MVP_PLUS" | "MVP" | "VIP_PLUS" | "VIP" | "NONE" | null;
                /** @enum {string|null} */
                newPackageRank?: "MVP_PLUS" | "MVP" | "VIP_PLUS" | "VIP" | "NONE" | null;
                /** @enum {string|null} */
                monthlyPackageRank?: "SUPERSTAR" | "NONE" | null;
                firstLogin?: number | null;
                lastLogin?: number | null;
                lastLogout?: number | null;
                stats?: Record<string, unknown> | null;
              };
            };
          };
        };
        400: components["responses"]["DataMissing"];
        403: components["responses"]["InvalidKey"];
        429: components["responses"]["RateLimited"];
      };
    };
  };
  "/recentgames": {
    /** The recently played games of a specific player */
    get: {
      parameters: {
        query: {
          uuid: string;
        };
      };
      responses: {
        /** @description Get player's recent game */
        200: {
          content: {
            "application/json": {
              success?: boolean;
              /** Format: uuid */
              uuid?: string;
              games?: ({
                  /** Format: int64 */
                  date?: number;
                  gameType?: string;
                  mode?: string;
                  map?: string;
                  /** Format: int64 */
                  ended?: number;
                })[];
            };
          };
        };
        400: components["responses"]["DataMissing"];
        403: components["responses"]["InvalidKey"];
        422: components["responses"]["MalformedData"];
        429: components["responses"]["RateLimited"];
      };
    };
  };
  "/status": {
    /** The current online status of a specific player */
    get: {
      parameters: {
        query: {
          uuid: string;
        };
      };
      responses: {
        /** @description Get player status */
        200: {
          content: {
            "application/json": {
              success?: boolean;
              /**
               * Format: uuid 
               * @example ad8fefaa8351454bb739a4eaa872173f
               */
              uuid?: string;
              session?: {
                online?: boolean;
                gameType?: string;
                mode?: string;
                map?: string;
              };
            };
          };
        };
        400: components["responses"]["DataMissing"];
        403: components["responses"]["InvalidKey"];
        429: components["responses"]["RateLimited"];
      };
    };
  };
  "/guild": {
    /** Retrieve a Guild by a player, id, or name */
    get: {
      parameters: {
        query: {
          id?: string;
          player?: string;
          name?: string;
        };
      };
      responses: {
        /** @description Get guild information */
        200: {
          content: {
            "application/json": {
              success?: boolean;
              guild?: Record<string, never>;
            };
          };
        };
        400: components["responses"]["DataMissing"];
        403: components["responses"]["InvalidKey"];
        429: components["responses"]["RateLimited"];
      };
    };
  };
  "/resources/games": {
    /**
     * Game Information 
     * @description Returns information about Hypixel Games. This endpoint is in early development and we are working to add more information when possible <a href="https://github.com/HypixelDev/PublicAPI/discussions/197#discussioncomment-1047648">HypixelDev/PublicAPI#197</a>
     */
    get: {
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              success?: boolean;
              lastUpdated?: number;
              /** @description A map where the key is the backend name of the game */
              games?: {
                [key: string]: components["schemas"]["Game"] | undefined;
              };
            };
          };
        };
      };
    };
  };
  "/resources/achievements": {
    /** Achievements */
    get: {
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              success?: boolean;
              lastUpdated?: number;
              achievements?: Record<string, never>;
            };
          };
        };
      };
    };
  };
  "/resources/challenges": {
    /** Challenges */
    get: {
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              success?: boolean;
              lastUpdated?: number;
              challenges?: Record<string, never>;
            };
          };
        };
      };
    };
  };
  "/resources/quests": {
    /** Quests */
    get: {
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              success?: boolean;
              lastUpdated?: number;
              quests?: Record<string, never>;
            };
          };
        };
      };
    };
  };
  "/resources/guilds/achievements": {
    /** Guild Achievements */
    get: {
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              success?: boolean;
              lastUpdated?: number;
              one_time?: Record<string, never>;
              tiered?: Record<string, never>;
            };
          };
        };
      };
    };
  };
  "/resources/vanity/pets": {
    /** Vanity Pets */
    get: {
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              success?: boolean;
              lastUpdated?: number;
              types?: Record<string, never>;
              rarities?: Record<string, never>;
            };
          };
        };
      };
    };
  };
  "/resources/vanity/companions": {
    /** Vanity Companions */
    get: {
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              success?: boolean;
              lastUpdated?: number;
              types?: Record<string, never>;
              rarities?: Record<string, never>;
            };
          };
        };
      };
    };
  };
  "/resources/skyblock/collections": {
    /**
     * Collections 
     * @description Information regarding Collections in the SkyBlock game.
     */
    get: {
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              success?: boolean;
              lastUpdated?: number;
              /** @example 0.11.22 */
              version?: string;
              collections?: Record<string, never>;
            };
          };
        };
      };
    };
  };
  "/resources/skyblock/skills": {
    /**
     * Skills 
     * @description Information regarding skills in the SkyBlock game.
     */
    get: {
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              success?: boolean;
              lastUpdated?: number;
              /** @example 0.11.22 */
              version?: string;
              skills?: Record<string, never>;
            };
          };
        };
      };
    };
  };
  "/resources/skyblock/items": {
    /**
     * Items 
     * @description Information regarding items in the SkyBlock game.
     */
    get: {
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              success?: boolean;
              lastUpdated?: number;
              items?: (components["schemas"]["SkyBlockItem"])[];
            };
          };
        };
      };
    };
  };
  "/resources/skyblock/election": {
    /**
     * Election and Mayor 
     * @description Information regarding the current mayor and ongoing election in SkyBlock.
     */
    get: {
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              success?: boolean;
              lastUpdated?: number;
              /** @description Data regarding the current mayor */
              mayor?: Record<string, never>;
              /** @description Data regarding the current election, will not be provided if there is no open election ongoing */
              current?: Record<string, never>;
            };
          };
        };
      };
    };
  };
  "/resources/skyblock/bingo": {
    /**
     * Active Bingo Goals 
     * @description Information regarding the current bingo event and its goals.
     */
    get: {
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              success?: boolean;
              lastUpdated?: number;
              /**
               * Format: int32 
               * @description The current bingo event ID, increments by 1 for each bingo hosted
               */
              id?: number;
              /** @description The goals for the current bingo event, as well as their progress */
              goals?: ({
                  /** @description The backend ID for this goal */
                  id: string;
                  /** @description The user friendly display name for this goal */
                  name: string;
                  /** @description Description of this goal */
                  lore?: string;
                  /** @description The tiers of this goal, if a global goal */
                  tiers?: (number)[];
                  /**
                   * Format: int64 
                   * @description The global progress of this goal
                   */
                  progress?: number;
                  /**
                   * Format: int32 
                   * @description The required amount for this specific goal
                   */
                  requiredAmount?: number;
                })[];
            };
          };
        };
      };
    };
  };
  "/skyblock/news": {
    /** News */
    get: {
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              success?: boolean;
              items?: Record<string, never>;
            };
          };
        };
        403: components["responses"]["InvalidKey"];
        429: components["responses"]["RateLimited"];
      };
    };
  };
  "/skyblock/auction": {
    /** Request auction(s) by the auction UUID, player UUID, or profile UUID. */
    get: {
      parameters: {
        query: {
          /** @description The auction UUID that you wish to request */
          uuid?: string;
          /** @description The player UUID that you wish to request */
          player?: string;
          /** @description The profile UUID that you wish to request */
          profile?: string;
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              success?: boolean;
              auctions?: (components["schemas"]["SkyBlockAuction"])[];
            };
          };
        };
        400: components["responses"]["DataMissing"];
        403: components["responses"]["InvalidKey"];
        422: components["responses"]["MalformedData"];
        429: components["responses"]["RateLimited"];
      };
    };
  };
  "/skyblock/auctions": {
    /**
     * Active auctions 
     * @description Returns the currently active auctions sorted by last updated first and paginated.
     */
    get: {
      parameters: {
        query: {
          page?: number;
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              success?: boolean;
              page?: number;
              /** @example 32 */
              totalPages?: number;
              /** @example 31267 */
              totalAuctions?: number;
              /**
               * Format: int64 
               * @example 1571065561345
               */
              lastUpdated?: number;
              auctions?: (components["schemas"]["SkyBlockAuction"])[];
            };
          };
        };
        404: components["responses"]["MissingPage"];
        422: components["responses"]["InvalidPage"];
        503: components["responses"]["NotPopulated"];
      };
    };
  };
  "/skyblock/auctions_ended": {
    /**
     * Recently ended auctions 
     * @description SkyBlock auctions which ended in the last 60 seconds.
     */
    get: {
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              success?: boolean;
              /**
               * Format: int64 
               * @example 1607456463916
               */
              lastUpdated?: number;
              auctions?: (Record<string, never>)[];
            };
          };
        };
      };
    };
  };
  "/skyblock/bazaar": {
    /**
     * Bazaar 
     * @description Returns the list of products along with their sell summary, buy summary and quick status.
     *  ### Product Description
     *  The returned product info has 3 main fields:
     *  - `buy_summary`
     *  - `sell_summary`
     *  - `quick_status`
     * 
     * `buy_summary` and `sell_summary` are the current top 30 orders for each transaction type (in-game example: [Stock of Stonks](https://i.imgur.com/SjRONxq.png)).
     * 
     * `quick_status` is a computed summary of the live state of the product (used for advanced mode view in the bazaar):
     * - `sellVolume` and `buyVolume` are the sum of item amounts in all orders.
     *  - `sellPrice` and `buyPrice` are the weighted average of the top 2% of orders by volume.
     *  - `movingWeek` is the historic transacted volume from last 7d + live state.
     *  - `sellOrders` and `buyOrders` are the count of active orders.
     */
    get: {
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              success?: boolean;
              /**
               * Format: int64 
               * @example 1590854517479
               */
              lastUpdated?: number;
              /**
               * @example {
               *   "INK_SACK:3": {
               *     "product_id": "INK_SACK:3",
               *     "sell_summary": [
               *       {
               *         "amount": 20569,
               *         "pricePerUnit": 4.2,
               *         "orders": 1
               *       },
               *       {
               *         "amount": 140326,
               *         "pricePerUnit": 3.8,
               *         "orders": 2
               *       }
               *     ],
               *     "buy_summary": [
               *       {
               *         "amount": 640,
               *         "pricePerUnit": 4.8,
               *         "orders": 1
               *       },
               *       {
               *         "amount": 640,
               *         "pricePerUnit": 4.9,
               *         "orders": 1
               *       },
               *       {
               *         "amount": 25957,
               *         "pricePerUnit": 5,
               *         "orders": 3
               *       }
               *     ],
               *     "quick_status": {
               *       "productId": "INK_SACK:3",
               *       "sellPrice": 4.2,
               *       "sellVolume": 409855,
               *       "sellMovingWeek": 8301075,
               *       "sellOrders": 11,
               *       "buyPrice": 4.99260315136572,
               *       "buyVolume": 1254854,
               *       "buyMovingWeek": 5830656,
               *       "buyOrders": 85
               *     }
               *   }
               * }
               */
              products?: Record<string, never>;
            };
          };
        };
        503: components["responses"]["NotPopulated"];
      };
    };
  };
  "/skyblock/profile": {
    /**
     * Profile by UUID 
     * @description SkyBlock profile data, such as stats, objectives etc. The data returned can differ depending on the players in-game API settings.
     */
    get: {
      parameters: {
        query: {
          profile?: string;
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              success?: boolean;
              profile?: components["schemas"]["SkyBlockProfile"];
            };
          };
        };
        400: components["responses"]["DataMissing"];
        403: components["responses"]["InvalidKey"];
        422: components["responses"]["MalformedData"];
        429: components["responses"]["RateLimited"];
      };
    };
  };
  "/skyblock/profiles": {
    /** Profiles by player */
    get: {
      parameters: {
        query: {
          uuid?: string;
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              success?: boolean;
              profiles?: (components["schemas"]["SkyBlockProfile"])[];
            };
          };
        };
        400: components["responses"]["DataMissing"];
        403: components["responses"]["InvalidKey"];
        422: components["responses"]["MalformedData"];
        429: components["responses"]["RateLimited"];
      };
    };
  };
  "/skyblock/bingo": {
    /**
     * Bingo data by player 
     * @description Bingo data for participated events of the provided player.
     */
    get: {
      parameters: {
        query: {
          uuid?: string;
        };
      };
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              success?: boolean;
              events?: ({
                  /**
                   * Format: int32 
                   * @description The id for this event 
                   * @example 2
                   */
                  key: number;
                  /**
                   * Format: int32 
                   * @description The amount of points earned 
                   * @example 117
                   */
                  points: number;
                  /** @description The completed goal IDs */
                  completed_goals: (string)[];
                })[];
            };
          };
        };
        400: components["responses"]["DataMissing"];
        403: components["responses"]["InvalidKey"];
        /** @description No data could be found for the provided player uuid. */
        404: {
          content: {
            "application/json": {
              /** @example false */
              success?: boolean;
              /** @example No bingo data could be found */
              cause?: string;
            };
          };
        };
        422: components["responses"]["MalformedData"];
        429: components["responses"]["RateLimited"];
      };
    };
  };
  "/skyblock/firesales": {
    /**
     * Active/Upcoming Fire Sales 
     * @description Retrieve the currently active or upcoming Fire Sales for SkyBlock.
     */
    get: {
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              success?: boolean;
              sales?: (components["schemas"]["SkyBlockFireSale"])[];
            };
          };
        };
      };
    };
  };
  "/boosters": {
    /** Active Network Boosters */
    get: {
      responses: {
        /** @description Get boosters list */
        200: {
          content: {
            "application/json": {
              success?: boolean;
              boosters?: (components["schemas"]["ActiveBooster"] | components["schemas"]["QueuedBooster"])[];
              boosterState?: {
                decrementing?: boolean;
              };
            };
          };
        };
        403: components["responses"]["InvalidKey"];
        429: components["responses"]["RateLimited"];
      };
    };
  };
  "/counts": {
    /** Current Player Counts */
    get: {
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              success?: boolean;
              playerCount?: number;
              /**
               * @example {
               *   "GAME_TYPE": {
               *     "players": 2,
               *     "modes": {
               *       "mode_1": 1,
               *       "mode_2": 1
               *     }
               *   }
               * }
               */
              games?: Record<string, never>;
            };
          };
        };
        403: components["responses"]["InvalidKey"];
        429: components["responses"]["RateLimited"];
      };
    };
  };
  "/leaderboards": {
    /** Current Leaderboards */
    get: {
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              success?: boolean;
              leaderboards?: Record<string, never>;
            };
          };
        };
        403: components["responses"]["InvalidKey"];
        429: components["responses"]["RateLimited"];
        503: components["responses"]["NotPopulated"];
      };
    };
  };
  "/punishmentstats": {
    /** Punishment Statistics */
    get: {
      responses: {
        /** @description A successful response */
        200: {
          content: {
            "application/json": {
              success?: boolean;
              watchdog_lastMinute?: number;
              staff_rollingDaily?: number;
              watchdog_total?: number;
              watchdog_rollingDaily?: number;
              staff_total?: number;
            };
          };
        };
        403: components["responses"]["InvalidKey"];
        429: components["responses"]["RateLimited"];
        503: components["responses"]["NotPopulated"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Booster: {
      /** Format: objectid */
      _id?: string;
      /**
       * Format: uuid 
       * @example ad8fefaa8351454bb739a4eaa872173f
       */
      purchaserUuid?: string;
      amount?: number;
      originalLength?: number;
      length?: number;
      gameType?: number;
      /** Format: int64 */
      dateActivated?: number;
    };
    ActiveBooster: components["schemas"]["Booster"] & ({
      stacked?: (string)[] | null;
    });
    QueuedBooster: components["schemas"]["Booster"] & ({
      stacked?: boolean | null;
    });
    /**
     * @example {
     *   "_id": "5dcdaf2244f4f4f350c02bf3",
     *   "uuid": "409a1e0f261a49849493278d6cd9305a",
     *   "auctioneer": "347ef6c1daac45ed9d1fa02818cf0fb6",
     *   "profile_id": "347ef6c1daac45ed9d1fa02818cf0fb6",
     *   "coop": [
     *     "347ef6c1daac45ed9d1fa02818cf0fb6"
     *   ],
     *   "start": 1573760802637,
     *   "end": 1573761102637,
     *   "item_name": "Azure Bluet",
     *   "item_lore": "§f§lCOMMON",
     *   "extra": "Azure Bluet Red Rose",
     *   "category": "blocks",
     *   "tier": "COMMON",
     *   "starting_bid": 1,
     *   "item_bytes": {
     *     "type": 0,
     *     "data": "H4sIAAAAAAAAAB2NQQqCQBhGv1ErHaKu0KoLtGtnarRIhTpA/OGfDIwZ4wxUF/IeHiyyto/3eBKIIJQEIDx4qsJaYJK07m6FhG+p9hEdVMV7TXU3Wh+JWaW6h6ZXhODYGg5/LeZDfxt6nZR5XhYhgoIaxmKE8dsZXu20YwuJZfa0hmJrjbo6y134f8pTll5O5TnbbgAP05Qaqhk+8AVIrd2eoAAAAA=="
     *   },
     *   "claimed": true,
     *   "claimed_bidders": [],
     *   "highest_bid_amount": 7607533,
     *   "bids": [
     *     {
     *       "auction_id": "409a1e0f261a49849493278d6cd9305a",
     *       "bidder": "99748e629dee463892f68abf3a780094",
     *       "profile_id": "99748e629dee463892f68abf3a780094",
     *       "amount": 7607533,
     *       "timestamp": 1573760824844
     *     }
     *   ]
     * }
     */
    SkyBlockAuction: {
      /** Format: objectid */
      _id?: string;
      /** Format: uuid */
      uuid?: string;
      /** Format: uuid */
      auctioneer?: string;
      /** Format: uuid */
      profile_id?: string;
      coop?: (string)[];
      /** Format: int64 */
      start?: number;
      /** Format: int64 */
      end?: number;
      item_name?: string;
      item_lore?: string;
      extra?: string;
      category?: string;
      tier?: string;
      starting_bid?: number;
      item_bytes?: {
        type?: number;
        data?: string;
      };
      claimed?: boolean;
      claimed_bidders?: (unknown)[];
      highest_bid_amount?: number;
      bids?: ({
          /** Format: uuid */
          auction_id?: string;
          /** Format: uuid */
          bidder?: string;
          /** Format: uuid */
          profile_id?: string;
          amount?: number;
          /** Format: int64 */
          timestamp?: number;
        })[];
    };
    SkyBlockProfile: {
      /** Format: uuid */
      profile_id?: string;
      members?: Record<string, never>;
      community_upgrades?: Record<string, unknown> | null;
      cute_name?: string;
      banking?: Record<string, unknown> | null;
      game_mode?: string | null;
    };
    /**
     * @example {
     *   "material": "LEATHER_CHESTPLATE",
     *   "color": "255,215,0",
     *   "name": "Farm Armor Chestplate",
     *   "category": "CHESTPLATE",
     *   "tier": "RARE",
     *   "stats": {
     *     "DEFENSE": 75,
     *     "HEALTH": 20
     *   },
     *   "npc_sell_price": 5200,
     *   "id": "FARM_ARMOR_CHESTPLATE"
     * }
     */
    SkyBlockItem: {
      /** @description The unique identifier for this item */
      id?: string;
      /** @description The Bukkit material enum value for the item */
      material?: string;
      /** @description The name of the item */
      name?: string;
      /**
       * @description The rarity tier of the item 
       * @enum {string}
       */
      tier?: "COMMON" | "UNCOMMON" | "RARE" | "EPIC" | "LEGENDARY" | "MYTHIC" | "SUPREME" | "SPECIAL" | "VERY_SPECIAL";
      /** @description The color metadata to be applied to an item, usually leather armor pieces */
      color?: string;
      /** @description The skin value for a skull based item */
      skin?: string;
    };
    /**
     * @description Information about a specific game. When a field is not present you should fallback to the provided default if there is one, required fields will always exist. 
     * @example {
     *   "id": 58,
     *   "name": "Bed Wars",
     *   "databaseName": "Bedwars",
     *   "modeNames": {
     *     "BEDWARS_TWO_FOUR": "4v4",
     *     "BEDWARS_EIGHT_ONE": "Solo"
     *   }
     * }
     */
    Game: {
      /**
       * @description The backend ID of the game. 
       * @example 1
       */
      id: number;
      /**
       * @description The display name of the game. 
       * @example Bed Wars
       */
      name: string;
      /**
       * @description The key used for database storage, such as for stats. 
       * @example Bedwars
       */
      databaseName: string;
      /**
       * @description A map of mode key to display name 
       * @example {
       *   "solo_normal": "Solo",
       *   "team_normal": "Doubles"
       * }
       */
      modeNames?: Record<string, never>;
      /**
       * @description True if the game is retired and no longer playable. 
       * @default false
       */
      retired?: boolean;
      /**
       * @description True if the game is legacy and part of the Classic Lobby. 
       * @default false
       */
      legacy?: boolean;
    };
    SkyBlockFireSale: {
      /** @description The SkyBlock item ID for this sale */
      item_id?: string;
      /** @description The start time in unix milliseconds for the sale */
      start?: number;
      /** @description The end time in unix milliseconds for the sale */
      end?: number;
      /** @description The amount of items available for this sale */
      amount?: number;
      /** @description The price in Gems for this sale */
      price?: number;
    };
  };
  responses: {
    /** @description Some data is missing, this is usually a field. */
    DataMissing: {
      content: {
        "application/json": {
          /** @example false */
          success?: boolean;
          /** @example Missing one or more fields [...] */
          cause?: string;
        };
      };
    };
    /** @description Access is forbidden, usually due to an invalid API key being used. */
    InvalidKey: {
      content: {
        "application/json": {
          /** @example false */
          success?: boolean;
          /** @example Invalid API key */
          cause?: string;
        };
      };
    };
    /** @description A request limit has been reached, usually this is due to the limit on the key being reached but can also be triggered by a global throttle. */
    RateLimited: {
      content: {
        "application/json": {
          /** @example false */
          success?: boolean;
          /** @example Key throttle */
          cause?: string;
          /** @example true */
          throttle?: boolean;
          /**
           * @description When this boolean exists and is true, the throttle occurring is a global throttle applied to all users 
           * @example true
           */
          global?: boolean;
        };
      };
    };
    /** @description The page provided is invalid. */
    InvalidPage: {
      content: {
        "application/json": {
          /** @example false */
          success?: boolean;
          /** @example Invalid page */
          cause?: string;
        };
      };
    };
    /** @description The page provided does not exist. */
    MissingPage: {
      content: {
        "application/json": {
          /** @example false */
          success?: boolean;
          /** @example Page not found */
          cause?: string;
        };
      };
    };
    /** @description Some data provided is invalid. */
    MalformedData: {
      content: {
        "application/json": {
          /** @example false */
          success?: boolean;
          /** @example Malformed UUID */
          cause?: string;
        };
      };
    };
    /** @description The data is not yet populated and should be available shortly */
    NotPopulated: {
      content: {
        "application/json": {
          /** @example false */
          success?: boolean;
          /** @example Leaderboard data has not yet been populated */
          cause?: string;
        };
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
